Project Path: map_game_tcb

Source Tree:

```txt
map_game_tcb
└── src
    ├── App.tsx
    ├── assets
    │   ├── images
    │   │   ├── burger.jpg
    │   │   ├── coffee.jpg
    │   │   ├── pizza.jpg
    │   │   └── ramen.jpg
    │   └── react.svg
    ├── components
    │   ├── common
    │   │   └── Card.tsx
    │   ├── dashboard
    │   │   ├── ProgressTracker.tsx
    │   │   ├── Promotions.tsx
    │   │   ├── RecentActivity.tsx
    │   │   ├── RewardScheme.tsx
    │   │   ├── SuggestionCarousel.tsx
    │   │   └── UserProfile.tsx
    │   ├── layout
    │   │   ├── Header.tsx
    │   │   └── PageWrapper.tsx
    │   └── map
    │       ├── ChallengeCard.tsx
    │       ├── ChallengeCarousel.tsx
    │       ├── ChallengeSection.tsx
    │       ├── FriendActivityCard.tsx
    │       ├── FriendActivityFeed.tsx
    │       ├── MapContainer.tsx
    │       ├── MapControls.tsx
    │       ├── PointOfInterestMarker.tsx
    │       └── StoreDetailsPopup.tsx
    ├── data
    │   └── mock.ts
    ├── hook
    │   └── useGeolocation.ts
    ├── index.css
    ├── main.tsx
    ├── pages
    │   ├── Dashboard.tsx
    │   └── InteractiveMap.tsx
    ├── types
    │   └── index.ts
    └── vite-env.d.ts

```

`map_game_tcb/src/App.tsx`:

```tsx
// App.tsx
import { Routes, Route } from 'react-router-dom';
import Dashboard from './pages/Dashboard';
import InteractiveMap from './pages/InteractiveMap';
import Header from './components/layout/Header';
import PageWrapper from './components/layout/PageWrapper';

const App = () => {
  return (
    <div className="bg-gray-50 min-h-screen font-sans">
      <Header />
      <PageWrapper>
        <Routes>
          <Route path="/" element={<Dashboard />} />
          <Route path="/map" element={<InteractiveMap />} />
        </Routes>
      </PageWrapper>
    </div>
  );
};

export default App;
```

`map_game_tcb/src/assets/react.svg`:

```svg
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
```

`map_game_tcb/src/components/common/Card.tsx`:

```tsx
import React from 'react';

interface CardProps {
  children: React.ReactNode;
  className?: string;
}

const Card: React.FC<CardProps> = ({ children, className = '' }) => {
  return (
    <div className={`bg-white rounded-xl shadow-md overflow-hidden ${className}`}>
      <div className="p-6">
        {children}
      </div>
    </div>
  );
};

export default Card;
```

`map_game_tcb/src/components/dashboard/ProgressTracker.tsx`:

```tsx
import Card from '../common/Card';

interface ProgressTrackerProps {
  currentPoints: number;
  pointsToNextTier: number;
  currentTier: string;
  nextTier: string;
}

const ProgressTracker = ({ currentPoints, pointsToNextTier, currentTier, nextTier }: ProgressTrackerProps) => {
  const progressPercentage = (currentPoints / pointsToNextTier) * 100;

  return (
    <Card>
        <h2 className="text-xl font-bold text-gray-700 mb-2">Your Progress</h2>
        <div className="flex justify-between items-baseline mb-1">
            <span className="text-sm font-semibold text-gray-600">{currentTier} Tier</span>
            <span className="text-sm font-semibold text-indigo-600">{nextTier} Tier</span>
        </div>
      <div className="w-full bg-gray-200 rounded-full h-4">
        <div
          className="bg-indigo-600 h-4 rounded-full transition-all duration-500 ease-out"
          style={{ width: `${progressPercentage}%` }}
        ></div>
      </div>
      <p className="text-right text-sm text-gray-600 mt-2">
        {currentPoints.toLocaleString()} / {pointsToNextTier.toLocaleString()} points to reach {nextTier}
      </p>
    </Card>
  );
};

export default ProgressTracker;
```

`map_game_tcb/src/components/dashboard/Promotions.tsx`:

```tsx
import { Promotion } from '../../types';
import Card from '../common/Card';
import { Ticket } from 'lucide-react';

interface PromotionsProps {
    promotions: Promotion[];
}

const Promotions = ({ promotions }: PromotionsProps) => {
  return (
    <Card>
        <h2 className="text-xl font-bold text-gray-700 mb-4">Active Promotions</h2>
        <div className="space-y-4">
            {promotions.map(promo => (
                <div key={promo.id} className="flex items-start space-x-4 p-4 bg-indigo-50 rounded-lg">
                    <div className="flex-shrink-0 h-10 w-10 bg-indigo-200 rounded-full flex items-center justify-center">
                        <Ticket className="h-6 w-6 text-indigo-600" />
                    </div>
                    <div>
                        <h3 className="font-semibold text-gray-800">{promo.title}</h3>
                        <p className="text-sm text-gray-600">{promo.description}</p>
                    </div>
                </div>
            ))}
        </div>
    </Card>
  );
};

export default Promotions;
```

`map_game_tcb/src/components/dashboard/RecentActivity.tsx`:

```tsx
import { Activity } from '../../types';
import Card from '../common/Card';
import { History } from 'lucide-react';

interface RecentActivityProps {
  activities: Activity[];
}

const RecentActivity = ({ activities }: RecentActivityProps) => {
  return (
    <Card>
      <h2 className="text-xl font-bold text-gray-700 mb-4">Recent Activity</h2>
      <ul className="space-y-4">
        {activities.map(activity => (
          <li key={activity.id} className="flex items-center space-x-4">
            <div className="flex-shrink-0 h-10 w-10 bg-gray-100 rounded-full flex items-center justify-center">
              <History className="h-6 w-6 text-gray-500" />
            </div>
            <div className="flex-grow">
              <p className="font-semibold text-gray-800">{activity.storeName}</p>
              <p className="text-sm text-gray-500">{activity.description}</p>
            </div>
            <div className="text-right">
                <p className="font-bold text-green-500">+{activity.points} pts</p>
                <p className="text-xs text-gray-400">{activity.date}</p>
            </div>
          </li>
        ))}
      </ul>
    </Card>
  );
};

export default RecentActivity;
```

`map_game_tcb/src/components/dashboard/RewardScheme.tsx`:

```tsx
import { RewardTier } from '../../types';
import Card from '../common/Card';
import { Star } from 'lucide-react';

interface RewardSchemeProps {
    tiers: RewardTier[];
    currentTier: string;
}

const tierColors: { [key: string]: { text: string; bg: string; } } = {
    Bronze: { text: 'text-amber-700', bg: 'bg-amber-100' },
    Silver: { text: 'text-slate-500', bg: 'bg-slate-100' },
    Gold: { text: 'text-amber-500', bg: 'bg-amber-100' },
    Platinum: { text: 'text-indigo-500', bg: 'bg-indigo-100' },
};

const RewardScheme = ({ tiers, currentTier }: RewardSchemeProps) => {
  return (
    <Card>
      <h2 className="text-xl font-bold text-gray-700 mb-4">Reward Tiers</h2>
        <ul className="space-y-3">
            {tiers.map(tier => {
                const isCurrent = tier.name === currentTier;
                return (
                    <li key={tier.name} className={`flex items-center justify-between p-3 rounded-lg ${isCurrent ? tierColors[tier.name].bg : ''}`}>
                        <div className="flex items-center space-x-3">
                            <Star className={`w-6 h-6 ${tierColors[tier.name].text}`} />
                            <span className="font-semibold text-gray-700">{tier.name}</span>
                        </div>
                        <span className="text-sm font-medium text-gray-500">{tier.points.toLocaleString()} pts</span>
                    </li>
                )
            })}
        </ul>
    </Card>
  );
};

export default RewardScheme;
```

`map_game_tcb/src/components/dashboard/SuggestionCarousel.tsx`:

```tsx
import { Suggestion } from '../../types';

interface SuggestionCarouselProps {
  suggestions: Suggestion[];
}

const SuggestionCarousel = ({ suggestions }: SuggestionCarouselProps) => {
  return (
    <div>
        <h2 className="text-2xl font-bold text-gray-800 mb-4">What to do today?</h2>
        <div className="relative">
            <div className="flex space-x-6 overflow-x-auto pb-4 scrollbar-hide">
            {suggestions.map((suggestion) => (
                <div key={suggestion.id} className="flex-shrink-0 w-72 h-48 relative rounded-xl shadow-lg overflow-hidden cursor-pointer group">
                <img src={suggestion.imageUrl} alt={suggestion.title} className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-110" />
                <div className="absolute inset-0 bg-black bg-opacity-40"></div>
                <h3 className="absolute bottom-4 left-4 text-white text-xl font-bold">{suggestion.title}</h3>
                </div>
            ))}
            </div>
        </div>
    </div>
  );
};

export default SuggestionCarousel;
```

`map_game_tcb/src/components/dashboard/UserProfile.tsx`:

```tsx
import { User } from '../../types';
import { Award } from 'lucide-react';

interface UserProfileProps {
  user: User;
}

const UserProfile = ({ user }: UserProfileProps) => {
  return (
    <div className="text-center">
      <h1 className="text-4xl font-bold text-gray-800">Welcome, {user.name}!</h1>
      <div className="mt-4 flex items-center justify-center space-x-2 text-2xl text-amber-500">
        <Award className="w-8 h-8" />
        <span className="font-semibold">{user.points.toLocaleString()} Points</span>
      </div>
    </div>
  );
};

export default UserProfile;
```

`map_game_tcb/src/components/layout/Header.tsx`:

```tsx
import { NavLink } from 'react-router-dom';
import { Map, LayoutDashboard } from 'lucide-react';

const Header = () => {
  // Style for the active NavLink
  const activeLinkStyle = {
    color: '#4f46e5', // indigo-600
    borderBottom: '2px solid #4f46e5',
  };

  return (
    <header className="bg-white shadow-md sticky top-0 z-50">
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex items-center justify-between h-16">
          {/* Logo/Brand Name */}
          <div className="flex-shrink-0">
            <NavLink to="/" className="text-2xl font-bold text-indigo-600">
              Techcombank Loyalty
            </NavLink>
          </div>

          {/* Navigation Links */}
          <nav className="hidden md:flex md:space-x-8">
            <NavLink
              to="/"
              className="flex items-center text-gray-600 hover:text-indigo-600 px-3 py-2 rounded-md text-sm font-medium transition-colors"
              style={({ isActive }) => (isActive ? activeLinkStyle : undefined)}
            >
              <LayoutDashboard className="mr-2 h-5 w-5" />
              Dashboard
            </NavLink>
            <NavLink
              to="/map"
              className="flex items-center text-gray-600 hover:text-indigo-600 px-3 py-2 rounded-md text-sm font-medium transition-colors"
              style={({ isActive }) => (isActive ? activeLinkStyle : undefined)}
            >
              <Map className="mr-2 h-5 w-5" />
              Interactive Map
            </NavLink>
          </nav>
        </div>
      </div>
    </header>
  );
};

export default Header;
```

`map_game_tcb/src/components/layout/PageWrapper.tsx`:

```tsx
import React from 'react';

interface PageWrapperProps {
  children: React.ReactNode;
}

const PageWrapper: React.FC<PageWrapperProps> = ({ children }) => {
  return (
    <main className="container mx-auto p-4 sm:p-6 lg:p-8">
      {children}
    </main>
  );
};

export default PageWrapper;
```

`map_game_tcb/src/components/map/ChallengeCard.tsx`:

```tsx
import type { Challenge } from "../../types";

interface ChallengeCardProps {
    challenge: Challenge;
    isSelected: boolean;
    onClick: (challengeId: string) => void;
}
  
const ChallengeCard = ({ challenge, isSelected, onClick }: ChallengeCardProps) => {
    return (
        <button
        onClick={() => onClick(challenge.id)}
        className={`
            flex-none w-64 h-36 rounded-lg overflow-hidden relative shadow-md 
            hover:shadow-lg transition-all duration-200 ease-in-out
            ${isSelected ? 'ring-4 ring-indigo-500 ring-offset-2' : ''}
            group cursor-pointer
        `}
        >
        <img
            src={challenge.imageUrl}
            alt={challenge.name}
            className="w-full h-full object-cover absolute inset-0 group-hover:scale-105 transition-transform duration-300"
        />
        <div className="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent p-4 flex flex-col justify-end text-left">
            <h3 className="text-white text-lg font-semibold leading-tight">{challenge.name}</h3>
            <p className="text-indigo-200 text-xs mt-1 truncate">{challenge.description}</p>
        </div>
        </button>
    );
};

export default ChallengeCard
```

`map_game_tcb/src/components/map/ChallengeCarousel.tsx`:

```tsx
import type { Challenge } from '../../types';
import ChallengeCard from './ChallengeCard';

interface ChallengeCarouselProps {
  challenges: Challenge[];
  selectedChallengeId: string | null;
  onChallengeSelect: (challengeId: string) => void;
}

const ChallengeCarousel = ({ challenges, selectedChallengeId, onChallengeSelect }: ChallengeCarouselProps) => {
  if (challenges.length === 0) {
    return (
      <div className="text-gray-500 text-center py-8">
        No challenges available for this category yet.
      </div>
    );
  }

  return (
    <div className="relative">
      <div className="flex overflow-x-auto snap-x snap-mandatory pb-4 space-x-4 hide-scrollbar">
        {challenges.map(challenge => (
          <ChallengeCard
            key={challenge.id}
            challenge={challenge}
            isSelected={challenge.id === selectedChallengeId}
            onClick={onChallengeSelect}
          />
        ))}
      </div>
      {/* Custom scrollbar styling (optional, but good for UX) */}
      <style jsx>{`
        .hide-scrollbar::-webkit-scrollbar {
          display: none;
        }
        .hide-scrollbar {
          -ms-overflow-style: none;  /* IE and Edge */
          scrollbar-width: none;  /* Firefox */
        }
      `}</style>
    </div>
  );
};

export default ChallengeCarousel
```

`map_game_tcb/src/components/map/ChallengeSection.tsx`:

```tsx
import { Utensils, Coffee, Gem, XCircle, LocateFixed, Loader } from 'lucide-react';
import type { Challenge, PointOfInterest } from '../../types';
import ChallengeCarousel from './ChallengeCarousel';

type Category = PointOfInterest['category'];

interface ChallengeSectionProps {
  challenges: Challenge[];
  selectedChallengeCategory: Category | null;
  onChallengeCategoryChange: (category: Category) => void;
  selectedChallengeId: string | null;
  onChallengeSelect: (challengeId: string) => void;
  onCenterMeClick: () => void; // New properties for center me button
  isLocating: boolean;
}

const CHALLENGE_CATEGORIES: Category[] = ['Food', 'Drink', 'Service'];

const categoryIcons: Record<Category, React.ReactElement> = {
  Food: <Utensils className="w-5 h-5 mr-2" />,
  Drink: <Coffee className="w-5 h-5 mr-2" />,
  Service: <Gem className="w-5 h-5 mr-2" />,
};

const ChallengeSection = ({
  challenges,
  selectedChallengeCategory,
  onChallengeCategoryChange,
  selectedChallengeId,
  onChallengeSelect,
  onCenterMeClick,
  isLocating,
}: ChallengeSectionProps) => {
  const filteredChallenges = challenges.filter(
    (challenge) =>
      selectedChallengeCategory === null || challenge.category === selectedChallengeCategory
  );

  return (
    <div className="bg-white p-6 rounded-xl shadow-lg mt-8">
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-2xl font-bold text-gray-800">Active Challenges</h2>
        <div className="flex items-center gap-2"> {/* Container for utility buttons */}
            {/* "Clear Challenge" button appears only when a specific challenge is selected */}
            {selectedChallengeId && (
            <button
                onClick={() => onChallengeSelect('')} // Deselects the current challenge
                className="flex items-center text-red-600 hover:text-red-800 text-sm font-semibold transition-colors"
            >
                <XCircle className="w-4 h-4 mr-1" /> Clear Challenge
            </button>
            )}

            {/* "Center Map" button, now inside the challenge box */}
            <button 
                onClick={onCenterMeClick}
                disabled={isLocating}
                className="flex items-center px-4 py-2 text-sm font-semibold text-white bg-indigo-600 rounded-lg shadow-sm hover:bg-indigo-700 disabled:bg-indigo-300 transition-colors"
            >
                {isLocating ? <Loader className="w-4 h-4 mr-2 animate-spin" /> : <LocateFixed className="w-4 h-4 mr-2" />}
                {isLocating ? 'Locating...' : 'Center Map'}
            </button>
        </div>
      </div>

      <p className="text-gray-600 mb-4">
        Select a category to find challenges or click on a challenge to see participating stores.
      </p>

      {/* Layer 1: Challenge Category Selection Buttons */}
      <div className="flex flex-wrap gap-3 mb-6">
        {CHALLENGE_CATEGORIES.map(category => (
          <button
            key={category}
            onClick={() => onChallengeCategoryChange(category)}
            className={`flex items-center px-5 py-2 text-base font-semibold rounded-full border-2 transition-colors duration-200 ease-in-out
              ${selectedChallengeCategory === category
                ? 'bg-indigo-600 text-white border-indigo-600 shadow-md' // Active state styling
                : 'bg-indigo-50 text-indigo-700 border-indigo-200 hover:bg-indigo-100' // Inactive state styling
              }
            `}
          >
            {categoryIcons[category]}
            {category} Challenges
          </button>
        ))}
      </div>

      {/* Layer 2: Challenge Carousel - conditionally rendered based on category selection */}
      {selectedChallengeCategory && (
        <div className="mt-6">
          <h3 className="text-xl font-semibold text-gray-700 mb-4">
            {selectedChallengeCategory} Challenges
          </h3>
          <ChallengeCarousel
            challenges={filteredChallenges} // Only show challenges for the selected category
            selectedChallengeId={selectedChallengeId}
            onChallengeSelect={onChallengeSelect}
          />
        </div>
      )}
      {/* Message displayed when no challenge category is selected */}
      {!selectedChallengeCategory && (
        <div className="text-center text-gray-500 py-8 border border-dashed border-gray-300 rounded-lg">
          Select a category above to browse challenges.
        </div>
      )}
    </div>
  );
};

export default ChallengeSection
```

`map_game_tcb/src/components/map/FriendActivityCard.tsx`:

```tsx
// src/components/map/FriendActivityCard.tsx

import type { Friend } from '../../types';
import { Trophy, MapPin, Award } from 'lucide-react';

interface FriendActivityCardProps {
  friend: Friend;
}

const iconMap = {
  challenge: <Trophy className="w-4 h-4 text-amber-500 flex-shrink-0" />,
  poi: <MapPin className="w-4 h-4 text-rose-500 flex-shrink-0" />,
};

const FriendActivityCard = ({ friend }: FriendActivityCardProps) => {
  return (
    // MODIFIED: Added w-80 and flex-shrink-0 for consistent sizing in a horizontal scroll container
    <div className="bg-white rounded-xl shadow-md p-4 border border-gray-100 transition-all hover:shadow-lg w-80 flex-shrink-0">
      {/* Card Header */}
      <div className="flex items-start space-x-4 mb-4">
        <img
          src={friend.avatarUrl}
          alt={friend.name}
          className="w-14 h-14 rounded-full border-2 border-indigo-200"
        />
        <div className="flex-grow">
          <p className="text-lg font-bold text-gray-800">{friend.name}</p>
          <div className="flex items-center text-sm text-gray-500">
            <Award className="w-4 h-4 mr-1.5 text-indigo-500" />
            <span className="font-semibold">{friend.totalPoints.toLocaleString()}</span>
            <span className="ml-1">Total Points</span>
          </div>
        </div>
      </div>

      {/* Recent Completions */}
      <div>
        <h4 className="font-semibold text-gray-600 mb-2 text-sm">Recent Completions:</h4>
        <ul className="space-y-2">
          {friend.recentCompletions.length > 0 ? (
            friend.recentCompletions.slice(0, 3).map((completion, index) => (
              <li key={index} className="flex items-center text-sm text-gray-700">
                {iconMap[completion.type]}
                <span className="ml-2 truncate">{completion.name}</span>
              </li>
            ))
          ) : (
            <p className="text-sm text-gray-400">No activity to show this week.</p>
          )}
        </ul>
      </div>
    </div>
  );
};

export default FriendActivityCard;
```

`map_game_tcb/src/components/map/FriendActivityFeed.tsx`:

```tsx
import type { Friend } from '../../types';
import FriendActivityCard from './FriendActivityCard';

interface FriendActivityFeedProps {
  friends: Friend[];
}

const FriendActivityFeed = ({ friends }: FriendActivityFeedProps) => {
  return (
    <div className="mb-8">
      <h2 className="text-2xl font-bold text-gray-900 mb-4">Connect with Friends</h2>
      {/* MODIFIED: This is now a flex container that scrolls horizontally */}
      <div className="flex space-x-4 overflow-x-auto pb-4 scrollbar-hide">
        {friends.map(friend => (
          <FriendActivityCard key={friend.id} friend={friend} />
        ))}
      </div>
    </div>
  );
};

export default FriendActivityFeed;
```

`map_game_tcb/src/components/map/MapContainer.tsx`:

```tsx
// src/components/map/MapContainer.tsx
import { MapContainer as LeafletMap, TileLayer, useMap } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import type { PointOfInterest } from '../../types';
import PointOfInterestMarker from './PointOfInterestMarker';

// Component to handle map view changes
const MapUpdater = ({ center }: { center: [number, number] }) => {
    const map = useMap();
    map.setView(center, map.getZoom());
    return null;
}

interface MapContainerProps {
  pointsOfInterest: PointOfInterest[];
  center: [number, number];
}

const MapContainer = ({ pointsOfInterest, center }: MapContainerProps) => {
  return (
    <LeafletMap center={center} zoom={13} style={{ height: '100%', width: '100%' }}>
      <MapUpdater center={center} />
      <TileLayer
        url="https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png"
        attribution='© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors © <a href="https://carto.com/attributions">CARTO</a>'
      />
      {pointsOfInterest.map(poi => (
        <PointOfInterestMarker key={poi.id} poi={poi} />
      ))}
    </LeafletMap>
  );
};

export default MapContainer;
```

`map_game_tcb/src/components/map/MapControls.tsx`:

```tsx
// src/components/map/MapControls.tsx
import { Utensils, Coffee, Gem, LocateFixed, Loader } from 'lucide-react';
import { PointOfInterest } from '../../types';

type Category = PointOfInterest['category'];

interface MapControlsProps {
  categories: Category[];
  selectedCategories: Category[];
  onCategoryChange: (category: Category) => void;
  onCenterMeClick: () => void;
  isLocating: boolean;
}

const categoryIcons: Record<Category, React.ReactElement> = {
    Food: <Utensils className="w-5 h-5 mr-2" />,
    Drink: <Coffee className="w-5 h-5 mr-2" />,
    Service: <Gem className="w-5 h-5 mr-2" />,
};

const MapControls = ({ categories, selectedCategories, onCategoryChange, onCenterMeClick, isLocating }: MapControlsProps) => {
  return (
    <div className="mb-4 flex flex-wrap items-center justify-between gap-4">
        <div className="flex items-center space-x-2">
            <p className="font-semibold text-gray-700">Filter by:</p>
            {categories.map(category => (
                <button
                    key={category}
                    onClick={() => onCategoryChange(category)}
                    className={`flex items-center px-4 py-2 text-sm font-semibold rounded-full border-2 transition-colors ${
                        selectedCategories.includes(category)
                        ? 'bg-indigo-600 text-white border-indigo-600'
                        : 'bg-white text-gray-700 border-gray-300 hover:border-indigo-500'
                    }`}
                >
                    {categoryIcons[category]}
                    {category}
                </button>
            ))}
        </div>
        <button 
            onClick={onCenterMeClick}
            disabled={isLocating}
            className="flex items-center px-4 py-2 font-semibold text-white bg-indigo-600 rounded-lg shadow-sm hover:bg-indigo-700 disabled:bg-indigo-300 transition-colors"
        >
            {isLocating ? <Loader className="w-5 h-5 mr-2 animate-spin" /> : <LocateFixed className="w-5 h-5 mr-2" />}
            {isLocating ? 'Locating...' : 'Center on Me'}
        </button>
    </div>
  );
};

export default MapControls;
```

`map_game_tcb/src/components/map/PointOfInterestMarker.tsx`:

```tsx
// src/components/map/PointOfInterestMarker.tsx

import { Marker } from 'react-leaflet';
import { PointOfInterest } from '../../types';
import { divIcon } from 'leaflet';
import { Utensils, Coffee, Gem } from 'lucide-react';
import { renderToString } from 'react-dom/server';
import StoreDetailsPopup from './StoreDetailsPopup';

interface PointOfInterestMarkerProps {
  poi: PointOfInterest;
}

const categoryIcons = {
    Food: <Utensils className="w-5 h-5 text-white" />,
    Drink: <Coffee className="w-5 h-5 text-white" />,
    Service: <Gem className="w-5 h-5 text-white" />
};

const PointOfInterestMarker = ({ poi }: PointOfInterestMarkerProps) => {
    const iconHtml = renderToString(
        <div className="w-10 h-10 bg-indigo-600 rounded-full flex items-center justify-center shadow-lg border-2 border-white">
            {categoryIcons[poi.category]}
        </div>
    );

    const customIcon = divIcon({
        html: iconHtml,
        className: 'bg-transparent border-0',
        iconSize: [40, 40],
        iconAnchor: [20, 20],
    });


  return (
    <Marker position={poi.position} icon={customIcon}>
      <StoreDetailsPopup poi={poi} />
    </Marker>
  );
};

export default PointOfInterestMarker;
```

`map_game_tcb/src/components/map/StoreDetailsPopup.tsx`:

```tsx
// src/components/map/StoreDetailsPopup.tsx

import { Popup } from 'react-leaflet';
import type { PointOfInterest } from '../../types';

interface StoreDetailsPopupProps {
  poi: PointOfInterest;
}

const StoreDetailsPopup = ({ poi }: StoreDetailsPopupProps) => {
  return (
    <Popup>
      <div className="p-1">
        <h3 className="font-bold text-lg text-gray-800">{poi.name}</h3>
        <p className="text-sm text-indigo-600 font-semibold my-2">{poi.voucher.title}</p>
        <p className="text-xs text-gray-600 mb-3">{poi.voucher.description}</p>
        <button className="w-full bg-indigo-600 text-white text-sm font-semibold py-2 px-4 rounded-lg hover:bg-indigo-700 transition-colors">
          View Details
        </button>
      </div>
    </Popup>
  );
};

export default StoreDetailsPopup;
```

`map_game_tcb/src/data/mock.ts`:

```ts
// src/data/mock.ts

import type { User, PointOfInterest, Suggestion, Promotion, RewardTier, Activity, Challenge, Friend} from '../types';

export const MOCK_USER: User = {
  name: 'John Doe',
  points: 1250,
  currentTier: 'Silver',
  nextTier: 'Gold',
  pointsToNextTier: 2500,
};

export const MOCK_POIs: PointOfInterest[] = [
  {
    id: 'poi-1',
    name: 'Gourmet Burger Kitchen',
    category: 'Food',
    position: [51.505, -0.09],
    voucher: { title: '2-for-1 Burgers', description: 'Buy one burger and get the second one free.' },
  },
  {
    id: 'poi-2',
    name: 'The Coffee Bean',
    category: 'Drink',
    position: [51.51, -0.1],
    voucher: { title: 'Free Pastry', description: 'Get a free pastry with any large coffee purchase.' },
  },
  {
    id: 'poi-3',
    name: 'Pizzeria Roma',
    category: 'Food',
    position: [51.515, -0.08],
    voucher: { title: '15% Off Your Bill', description: 'Enjoy a 15% discount on your total bill.' },
  },
  {
    id: 'poi-4',
    name: 'City Spa & Services',
    category: 'Service',
    position: [51.512, -0.11],
    voucher: { title: '$20 Off Massage', description: 'Relax with a $20 discount on any 60-minute massage.' },
  },
  {
    id: 'poi-5',
    name: 'Sushi Palace',
    category: 'Food',
    position: [51.508, -0.095],
    voucher: { title: 'Free Edamame', description: 'Complimentary edamame with any sushi set.' },
  },
  {
    id: 'poi-6',
    name: 'Noodle House',
    category: 'Food',
    position: [51.503, -0.085],
    voucher: { title: '10% Off Noodles', description: '10% discount on all noodle dishes.' },
  },
  {
    id: 'poi-7',
    name: 'Tea Emporium',
    category: 'Drink',
    position: [51.513, -0.098],
    voucher: { title: 'Buy One Get One Tea', description: 'Purchase any tea and get another free.' },
  },
  {
    id: 'poi-8',
    name: 'Juice Bar Express',
    category: 'Drink',
    position: [51.507, -0.105],
    voucher: { title: 'Free Health Shot', description: 'A complimentary health shot with any juice order.' },
  },
  {
    id: 'poi-9',
    name: 'Elite Hair Salon',
    category: 'Service',
    position: [51.509, -0.082],
    voucher: { title: '20% Off Haircut', description: 'Get a stylish haircut with 20% off.' },
  },
  {
    id: 'poi-10',
    name: 'Quick Laundry Service',
    category: 'Service',
    position: [51.516, -0.10],
    voucher: { title: '$5 Off Dry Cleaning', description: 'Save $5 on your next dry cleaning order.' },
  },
];

export const MOCK_SUGGESTIONS: Suggestion[] = [
  { id: 'sug-1', title: 'Craving a Juicy Burger?', imageUrl: 'https://d1csarkz8obe9u.cloudfront.net/posterpreviews/burger-promotion-design-template-86c06b67ac6909b09a344c5de2ff411e_screen.jpg?ts=1601122948' },
  { id: 'sug-2', title: 'Time for a Coffee Break!', imageUrl: 'https://thumbs.dreamstime.com/b/promotion-banner-coffee-shop-vector-template-special-offer-cafe-buy-get-free-concept-advertising-81755427.jpg' },
  { id: 'sug-3', title: 'How About Pizza Tonight?', imageUrl: 'https://img.pikbest.com/origin/05/98/98/72IpIkbEsTZ2n.jpg!w700wp' },
  { id: 'sug-4', title: 'Warm Up with Ramen!', imageUrl: 'https://i.pinimg.com/736x/5c/d6/98/5cd698c7cce492c5361825c16f93e7ef.jpg' },
];

export const MOCK_PROMOTIONS: Promotion[] = [
    { id: 'promo-1', title: 'Weekend Special', description: 'Earn 2x points on all food purchases this weekend.' },
    { id: 'promo-2', title: 'Happy Hour Drinks', description: 'Get 50% off all drinks from 4 PM to 6 PM on weekdays.' },
];

export const MOCK_REWARD_TIERS: RewardTier[] = [
    { name: 'Bronze', points: 0 },
    { name: 'Silver', points: 1000 },
    { name: 'Gold', points: 2500 },
    { name: 'Platinum', points: 5000 },
];

export const MOCK_ACTIVITIES: Activity[] = [
    { id: 'act-1', storeName: 'Gourmet Burger Kitchen', description: 'Used 2-for-1 Voucher', points: 50, date: '2025-07-15' },
    { id: 'act-2', storeName: 'The Coffee Bean', description: 'Earned 2x Points', points: 30, date: '2025-07-14' },
    { id: 'act-3', storeName: 'Pizzeria Roma', description: 'Spent $25', points: 25, date: '2025-07-12' },
    { id: 'act-4', storeName: 'City Spa & Services', description: 'Welcome Bonus', points: 10, date: '2025-07-10' },
];

// Mock challanges
export const MOCK_CHALLENGES: Challenge[] = [
  {
    id: 'challenge-1',
    name: 'Hanoi Burger Blitz',
    category: 'Food',
    poiIds: ['poi-1', 'poi-3'], // Gourmet Burger Kitchen, Pizzeria Roma (for variety)
    description: 'Conquer Hanoi\'s best burgers and earn bonus points!',
    imageUrl: 'https://media.istockphoto.com/id/1188412964/photo/hamburger-with-cheese-and-french-fries.jpg?s=612x612&w=0&k=20&c=lmJ0qUjC3FtCrWOGU0hWvqBgXcKZ1imiXKOMuHRfFH8=',
  },
  {
    id: 'challenge-2',
    name: 'Traditional Noodle Quest',
    category: 'Food',
    poiIds: ['poi-5', 'poi-6'], // Sushi Palace, Noodle House
    description: 'Discover hidden gems of authentic Vietnamese noodles and sushi.',
    imageUrl: 'https://t3.ftcdn.net/jpg/03/37/48/82/360_F_337488257_uIisoWFIYsSa0NMOVwDmiVDSmEjGrMSc.jpg',
  },
  {
    id: 'challenge-3',
    name: 'Matcha Sprint Hanoi',
    category: 'Drink',
    poiIds: ['poi-2', 'poi-7'], // The Coffee Bean, Tea Emporium
    description: 'Race through Hanoi\'s top matcha and tea spots.',
    imageUrl: 'https://images.squarespace-cdn.com/content/v1/59010a64579fb3e8ae5b9281/1739136086434-PZ5Z7PP2GEKWE3Y4C4V1/deeplycoffeewinter-2.PNG',
  },
  {
    id: 'challenge-4',
    name: 'Juice & Chill Challenge',
    category: 'Drink',
    poiIds: ['poi-8'], // Juice Bar Express
    description: 'Refresh yourself with the city\'s finest fresh juices.',
    imageUrl: 'https://images-prod.healthline.com/hlcmsresource/images/AN_images/orange-juice-benefits-1296x728-feature.jpg',
  },
  {
    id: 'challenge-5',
    name: 'Urban Wellness Journey',
    category: 'Service',
    poiIds: ['poi-4', 'poi-9'], // City Spa & Services, Elite Hair Salon
    description: 'Pamper yourself and discover the best relaxation spots.',
    imageUrl: 'https://images.unsplash.com/photo-1561133211-6067fc8e7348?fm=jpg&q=60&w=3000&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8N3x8cGFya3xlbnwwfHwwfHx8MA%3D%3D',
  },
  {
    id: 'challenge-6',
    name: 'Daily Essentials Loop',
    category: 'Service',
    poiIds: ['poi-10'], // Quick Laundry Service
    description: 'Complete your daily errands and get rewarded.',
    imageUrl: 'https://pathways.org/_next/image?url=https%3A%2F%2Fd2i2c20kelx1tf.cloudfront.net%2Fpublic%2FMom_with_baby_in_supermarket_smaller-1024x682.jpg&w=1200&q=75',
  },
];

export const MOCK_FRIENDS_WITH_ACTIVITY: Friend[] = [
  {
    id: 'friend-1',
    name: 'Alice',
    avatarUrl: 'https://images-prod.healthline.com/hlcmsresource/images/AN_images/orange-juice-benefits-1296x728-feature.jpg',
    totalPoints: 1250,
    recentCompletions: [
      { type: 'challenge', name: 'Taco Tuesday' },
      { type: 'poi', name: 'Gourmet Burger Kitchen' },
      { type: 'poi', name: 'The Corner Cafe' },
    ],
  },
  {
    id: 'friend-2',
    name: 'Bob',
    avatarUrl: 'https://images-prod.healthline.com/hlcmsresource/images/AN_images/orange-juice-benefits-1296x728-feature.jpg',
    totalPoints: 980,
    recentCompletions: [
      { type: 'challenge', name: 'Morning Brew' },
      { type: 'poi', name: 'Artisan Coffee' },
    ],
  },
  {
    id: 'friend-3',
    name: 'Charlie',
    avatarUrl: 'https://images-prod.healthline.com/hlcmsresource/images/AN_images/orange-juice-benefits-1296x728-feature.jpg',
    totalPoints: 2100,
    recentCompletions: [
      { type: 'challenge', name: 'Pizza Passion' },
      { type: 'challenge', name: 'Sweet Tooth' },
      { type: 'poi', name: 'Luigi\'s Pizzeria' },
      { type: 'poi', name: 'The Ice Cream Parlour' },
    ],
  },
  {
    id: 'friend-4',
    name: 'Diana',
    avatarUrl: 'https://images-prod.healthline.com/hlcmsresource/images/AN_images/orange-juice-benefits-1296x728-feature.jpg',
    totalPoints: 1500,
    recentCompletions: [
        { type: 'poi', name: 'Central Park Fitness' },
    ],
  }
];
```

`map_game_tcb/src/hook/useGeolocation.ts`:

```ts
import { useState } from 'react';

export const useGeolocation = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [position, setPosition] = useState<[number, number] | null>(null);
  const [error, setError] = useState<string | null>(null);

  const getPosition = () => {
    if (!navigator.geolocation) {
      setError("Geolocation is not supported by your browser.");
      return;
    }

    setIsLoading(true);
    navigator.geolocation.getCurrentPosition(
      (pos) => {
        setPosition([pos.coords.latitude, pos.coords.longitude]);
        setIsLoading(false);
      },
      (err) => {
        setError(err.message);
        setIsLoading(false);
      }
    );
  };

  return { isLoading, position, error, getPosition };
};
```

`map_game_tcb/src/index.css`:

```css
@tailwind base;
@tailwind components;
@tailwind utilities;
```

`map_game_tcb/src/main.tsx`:

```tsx
// main.tsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';
import { BrowserRouter } from 'react-router-dom';

ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>
);
```

`map_game_tcb/src/pages/Dashboard.tsx`:

```tsx
// src/pages/Dashboard.tsx

import UserProfile from '../components/dashboard/UserProfile';
import ProgressTracker from '../components/dashboard/ProgressTracker';
import RewardScheme from '../components/dashboard/RewardScheme';
import SuggestionCarousel from '../components/dashboard/SuggestionCarousel';
import Promotions from '../components/dashboard/Promotions';
import RecentActivity from '../components/dashboard/RecentActivity';

import { MOCK_USER, MOCK_SUGGESTIONS, MOCK_PROMOTIONS, MOCK_REWARD_TIERS, MOCK_ACTIVITIES } from '../data/mock';

const Dashboard = () => {
  return (
    <div className="space-y-8">
      <UserProfile user={MOCK_USER} />
      <ProgressTracker
        currentPoints={MOCK_USER.points}
        pointsToNextTier={MOCK_USER.pointsToNextTier}
        currentTier={MOCK_USER.currentTier}
        nextTier={MOCK_USER.nextTier}
      />
      <SuggestionCarousel suggestions={MOCK_SUGGESTIONS} />
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 items-start">
        <div className="lg:col-span-2 space-y-8">
            <Promotions promotions={MOCK_PROMOTIONS} />
            <RecentActivity activities={MOCK_ACTIVITIES} />
        </div>
        <div className="lg:col-span-1">
            <RewardScheme tiers={MOCK_REWARD_TIERS} currentTier={MOCK_USER.currentTier} />
        </div>
      </div>
    </div>
  );
};

export default Dashboard;
```

`map_game_tcb/src/pages/InteractiveMap.tsx`:

```tsx
// src/pages/InteractiveMap.tsx

import { useState, useMemo } from 'react';
import MapContainer from '../components/map/MapContainer';
import { MOCK_POIs, MOCK_CHALLENGES, MOCK_FRIENDS_WITH_ACTIVITY } from '../data/mock';
import type { PointOfInterest } from '../types'; // Using 'import type' for type-only import
import { useGeolocation } from '../hook/useGeolocation'; // Corrected: Path changed from 'hook' to 'hooks'
import ChallengeSection from '../components/map/ChallengeSection';
import FriendActivityFeed from '../components/map/FriendActivityFeed';

// Defining Category type for clarity, derived from PointOfInterest
type Category = PointOfInterest['category'];

const InteractiveMap = () => {
  // State for the map's center coordinates
  const [mapCenter, setMapCenter] = useState<[number, number]>([51.505, -0.09]); // Default center

  // Geolocation hook for getting user's current position
  const { isLoading, position, getPosition } = useGeolocation();

  // States for managing challenge selection
  const [selectedChallengeCategory, setSelectedChallengeCategory] = useState<Category | null>(null);
  const [selectedChallengeId, setSelectedChallengeId] = useState<string | null>(null);

  // Effect to update map center when geolocation position changes
  // This runs on initial load if position is available, and whenever getPosition is called
  if (position && (mapCenter[0] !== position[0] || mapCenter[1] !== position[1])) {
      setMapCenter(position);
  }

  // Handler for changing the selected challenge category (Layer 1 filter)
  const handleChallengeCategoryChange = (category: Category) => {
    // Toggle selection: if already selected, deselect; otherwise, select
    setSelectedChallengeCategory(prev => (prev === category ? null : category));
    setSelectedChallengeId(null); // Reset specific challenge selection when category changes
  };

  // Handler for selecting a specific challenge (Layer 2 filter)
  const handleChallengeSelect = (challengeId: string) => {
    // Toggle selection: if already selected, deselect; otherwise, select
    setSelectedChallengeId(prev => (prev === challengeId ? null : challengeId));
  };

  const filteredPOIs = useMemo(() => {

    // Define a state that will track what type of conditions are being applied
    let currentPOIs = MOCK_POIs

    // Tier 1: Filter by categories
    if (selectedChallengeCategory) {
      currentPOIs = currentPOIs.filter(poi => poi.category === selectedChallengeCategory); // Retrieve pois in that category only
      if (selectedChallengeId) { // If a challenge is also detected
        const challenge = MOCK_CHALLENGES.find(c => c.id === selectedChallengeId);
        if (challenge) {
          currentPOIs = currentPOIs.filter(poi => challenge.poiIds.includes(poi.id)); // Retrieve pois in that challenge from a list of filtered pois 
        } // If no challenge is detected, return the list of pois filtered by category 
      } 
    } 
    return currentPOIs // If no category detected, return a full list of pois
  }, [selectedChallengeId, selectedChallengeCategory]);

  return (
    // The entire component's JSX is wrapped in a single parent div
    <div>
      {/* UPDATED: Using the horizontal FriendActivityFeed component */}
      <FriendActivityFeed friends={MOCK_FRIENDS_WITH_ACTIVITY} />

      {/* The main Challenge Section, which handles category selection and challenge carousel */}
      <ChallengeSection
          challenges={MOCK_CHALLENGES}
          selectedChallengeCategory={selectedChallengeCategory}
          onChallengeCategoryChange={handleChallengeCategoryChange}
          selectedChallengeId={selectedChallengeId}
          onChallengeSelect={handleChallengeSelect}
          onCenterMeClick={getPosition}
          isLocating={isLoading}
      />
      
      {/* Container for the Leaflet map */}
      <div className="h-[65vh] w-full rounded-xl shadow-lg overflow-hidden mt-6">
          <MapContainer 
            center={mapCenter} // Passes the current map center (user location or default)
            pointsOfInterest={filteredPOIs} // Passes the dynamically filtered POIs
          />
      </div>
    </div>
  );
};

export default InteractiveMap;
```

`map_game_tcb/src/types/index.ts`:

```ts
// src/types/index.ts

export interface User {
    name: string;
    points: number;
    currentTier: 'Bronze' | 'Silver' | 'Gold';
    nextTier: 'Silver' | 'Gold' | 'Platinum';
    pointsToNextTier: number;
  }
  
  export interface PointOfInterest {
    id: string;
    name: string;
    category: 'Food' | 'Drink' | 'Service';
    position: [number, number];
    voucher: {
      title: string;
      description: string;
    };
  }
  
  export interface Suggestion {
    id: string;
    title: string;
    imageUrl: string;
  }
  
  export interface Promotion {
    id: string;
    title: string;
    description: string;
  }
  
  export interface RewardTier {
      name: 'Bronze' | 'Silver' | 'Gold' | 'Platinum';
      points: number;
  }

  export interface Activity {
    id: string;
    storeName: string;
    description: string;
    points: number;
    date: string;
  }

  export interface Challenge {
    id: string;
    name: string;
    category: 'Food' | 'Drink' | 'Service';
    poiIds: string[]; // IDs of POIs included in this challenge
    description: string;
    imageUrl: string;
  }

  // New interfaces for "Connect with your friends!" feature
  export interface Friend {
    id: string;
    name: string;
    avatarUrl: string;
    totalPoints: number;
    recentCompletions: {
        type: 'challenge' | 'poi';
        name: string;
    }[];
  };

  // export type FriendActivityType = 'challenge_completed' | 'weekly_summary';

  // export type FriendActivity = {
  //   id: string;
  //   friendId: string;
  //   timestamp: string;
  // } & (
  //     | { type: 'challenge_completed'; targetId: string; }
  //     | { type: 'weekly_summary'; targetIds: string[]; }
  // );
```

`map_game_tcb/src/vite-env.d.ts`:

```ts
/// <reference types="vite/client" />

```